c
exit
BCrypt::Password.new(user.password_digest).class
BCrypt::Password.new(user.password_digest)
user.password_digest
user.password
user
BCrypt::Password.new()
BCrypt.new("password")
BCrypt
Bcrypt.new
Bcrypt
user
password
c
exit
user.authenticate(password)
c
exit
Tweet.find(params[:id])
Tweet.find_by(params[:id])
params[:id]
Tweet.find_by(params[:id])
params
c
params
exit
params[:id]exit
params[:id]
params
tweet = Tweet.find_by(params[:id])
exit
params[:tweet][:subject]
params
exit
@user!=current_user
!@show
c
n
@user == current_user
@user
current_user
c
exit
@show
@sho
exit
@show
exit
@follower.where(user_id_following: current_user.
@follower.where(user_id_following: current_user.id)
@follower.find_by(user_id_following: current_user.id)
@follower.user
@follower
c
@following.count
@following
@follower
c
exit
Follower.where(user_id_followed: params[:id]).count
Follower.where(user_id_followed: params[:id])
@follower.count
@follower
@follow
Follower.find_by(user_id_followed: params[:id])
@follow
Follower.find_by(user_id_followed: params[:id])
Follower.find_by(user_id_followed: params[:id]).count
Follower.find_by(user_id_followed: params[:id])
@following
@follow
c
follow.user_id_following
follow.user
follow
n
follow
n
exit
params
exit
params
c
tweet_new
c
params
c
n
user
n
exit
params
params[:user][:password]
user
user.password = "password"
user.password
user
n
c
exit
params[:user][:email]
params[:user][:name]
params
exit
@tweets.each {|x| puts x}
@tweets
exit
user.authenticate("pa")
user.authenticate(pa)
user.authenticate(password)
password
user.password
user.password_digest
user.password
user
exit
User.authenticate
exit
User.all
User.authenticate
exit
User.authenticate
params
